#! /nix/store/g9ybksy400pfn7fncw8dqfnz6m7fdyrk-perl-5.20.1/bin/perl -w -I/nix/store/16za1lqa47rayyn9058i4a1nv358gnv5-nix-1.8/lib/perl5/site_perl/5.20.1/x86_64-linux-thread-multi -I/nix/store/d4b4avbsbcz4hbf35r1270rdkfk7gf7y-perl-DBI-1.631/lib/perl5/site_perl -I/nix/store/jhdnwklzq2pakz7sp631pf48vfbrgfcv-perl-DBD-SQLite-1.44/lib/perl5/site_perl -I/nix/store/wg4dxpl9c9xfr1zg4j80j4c4n5s626sy-perl-WWW-Curl-4.17/lib/perl5/site_perl

use utf8;
use strict;
use Nix::Config;
use Nix::Manifest;

binmode STDERR, ":encoding(utf8)";

my $manifestDir = $Nix::Config::manifestDir;


# Prevent access problems in shared-stored installations.
umask 0022;


# Create the manifests directory if it doesn't exist.
if (! -e $manifestDir) {
    mkdir $manifestDir, 0755 or die "cannot create directory ‘$manifestDir’";
}


# Make sure that the manifests directory is scanned for GC roots.
my $gcRootsDir = "$Nix::Config::stateDir/gcroots";
my $manifestDirLink = "$gcRootsDir/manifests";
if (! -l $manifestDirLink) {
    symlink($manifestDir, $manifestDirLink) or die "cannot create symlink ‘$manifestDirLink’";
}


# Process the URLs specified on the command line.

sub downloadFile {
    my $url = shift;
    $ENV{"PRINT_PATH"} = 1;
    $ENV{"QUIET"} = 1;
    my ($dummy, $path) = `$Nix::Config::binDir/nix-prefetch-url '$url'`;
    die "cannot fetch ‘$url’" if $? != 0;
    die "nix-prefetch-url did not return a path" unless defined $path;
    chomp $path;
    return $path;
}

sub processURL {
    my $url = shift;

    $url =~ s/\/$//;

    my $manifest;

    my $origUrl = $ENV{'NIX_ORIG_URL'} || $url;

    # First see if a bzipped manifest is available.
    if (system("$Nix::Config::curl --fail --silent --location --head '$url'.bz2 > /dev/null") == 0) {
        print "fetching list of Nix archives at ‘$url.bz2’...\n";
        $manifest = downloadFile "$url.bz2";
    }

    # Otherwise, just get the uncompressed manifest.
    else {
        print "fetching list of Nix archives at ‘$url’...\n";
        $manifest = downloadFile $url;
    }

    my $baseName = "unnamed";
    if ($url =~ /\/([^\/]+)\/[^\/]+$/) { # get the forelast component
        $baseName = $1;
    }

    my $hash = `$Nix::Config::binDir/nix-hash --flat '$manifest'`
        or die "cannot hash ‘$manifest’";
    chomp $hash;

    my $urlFile = "$manifestDir/$baseName-$hash.url";
    open URL, ">$urlFile" or die "cannot create ‘$urlFile’";
    print URL $origUrl;
    close URL;

    my $finalPath = "$manifestDir/$baseName-$hash.nixmanifest";

    unlink $finalPath if -e $finalPath;

    symlink("$manifest", "$finalPath")
        or die "cannot link ‘$finalPath’ to ‘$manifest’";

    deleteOldManifests($origUrl, $urlFile);
}

while (@ARGV) {
    my $url = shift @ARGV;
    if ($url eq "--help") {
        exec "man nix-pull" or die;
    } elsif ($url eq "--skip-wrong-store") {
        # No-op, no longer supported.
    } else {
        processURL $url;
    }
}


# Update the cache.
updateManifestDB();
